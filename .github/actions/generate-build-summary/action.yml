name: 'Determine if Build is Needed'
description: 'Decide whether to trigger a rootfs build based on triggers'

inputs:
  cves_detected:
    description: 'CVEs detected flag'
    required: true
  golang_updated:
    description: 'Golang updated flag'
    required: true
  event_name:
    description: 'GitHub event name'
    required: true
  event_action:
    description: 'GitHub event action (for repository_dispatch)'
    required: true
    default: ''
  trigger_reason:
    description: 'Manual trigger reason'
    required: false
    default: ''

outputs:
  should_build:
    description: 'Whether to proceed with build'
    value: ${{ steps.decide.outputs.should_build }}
  reason:
    description: 'Reason for the decision'
    value: ${{ steps.decide.outputs.reason }}

runs:
  using: 'composite'
  steps:
    - name: Decide if build is needed
      id: decide
      shell: bash
      run: |
        set -euo pipefail

        SHOULD_BUILD=false
        REASON="No triggers met"

        if [[ "${{ inputs.cves_detected }}" == "true" ]]; then
          SHOULD_BUILD=true
          REASON="New CVEs detected"
        fi

        if [[ "${{ inputs.golang_updated }}" == "true" ]]; then
          SHOULD_BUILD=true
          if [[ "$REASON" == "No triggers met" ]]; then
            REASON="Golang packages updated"
          else
            REASON="$REASON and Golang updated"
          fi
        fi

        if [[ "${{ inputs.event_name }}" == "schedule" ]]; then
          SHOULD_BUILD=true
          if [[ "$REASON" == "No triggers met" ]]; then
            REASON="Scheduled build"
          else
            REASON="$REASON (scheduled)"
          fi
        fi

        if [[ "${{ inputs.event_name }}" == "repository_dispatch" ]]; then
          case "${{ inputs.event_action }}" in
            "cve-update")
              SHOULD_BUILD=true
              if [[ "$REASON" == "No triggers met" ]]; then
                REASON="CVE update from repository_dispatch"
              else
                REASON="$REASON (CVE dispatch)"
              fi
              ;;
            "golang-update")
              SHOULD_BUILD=true
              if [[ "$REASON" == "No triggers met" ]]; then
                REASON="Golang update from repository_dispatch"
              else
                REASON="$REASON (Golang dispatch)"
              fi
              ;;
            "rootfs-change")
              SHOULD_BUILD=true
              if [[ "$REASON" == "No triggers met" ]]; then
                REASON="Rootfs change from repository_dispatch"
              else
                REASON="$REASON (Rootfs dispatch)"
              fi
              ;;
          esac
        fi

        if [[ "${{ inputs.event_name }}" == "workflow_dispatch" ]]; then
          SHOULD_BUILD=true
          if [[ "$REASON" == "No triggers met" ]]; then
            REASON="${{ inputs.trigger_reason || 'Manual trigger' }}"
          else
            REASON="$REASON (manual override)"
          fi
        fi

        # If still no reason, it's a false manual or other non-trigger
        if [[ "$SHOULD_BUILD" == "false" ]]; then
          REASON="No trigger conditions met"
        fi

        echo "::set-output name=should_build::$SHOULD_BUILD"
        echo "::set-output name=reason::$REASON"

        echo "Decision: should_build=$SHOULD_BUILD, reason=$REASON"
