name: 'BBL Up'
description: 'Set up test environment using BBL'

inputs:
  stack:
    description: 'Stack name'
    required: true
  version:
    description: 'Version number'
    required: true
  env_name:
    description: 'Environment name'
    required: true
  gcp_project_id:
    description: 'GCP Project ID'
    required: true
  gcp_zone:
    description: 'GCP Zone'
    required: true
  gcp_region:
    description: 'GCP Region'
    required: true
  lb_domain:
    description: 'Load balancer domain'
    required: true
  bbl_state_repo:
    description: 'Repo for BBL state (owner/repo)'
    required: true
  bbl_state_branch:
    description: 'Branch for BBL state'
    required: false
    default: 'main'
  lb_cert:
    description: 'Load balancer certificate'
    required: true
  lb_key:
    description: 'Load balancer private key'
    required: true
  bbl_state_deploy_key:
    description: 'SSH deploy key for BBL state repo'
    required: true

outputs:
  success:
    description: 'Whether BBL up succeeded'
    value: ${{ steps.bbl-up.outputs.success }}

runs:
  using: 'composite'
  steps:
    - name: Checkout BBL state repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.bbl_state_repo }}
        ref: ${{ inputs.bbl_state_branch }}
        path: bbl-state
        ssh-key: ${{ inputs.bbl_state_deploy_key }}

    - name: Cache BOSH/BBL tools
      id: cache-tools
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/bin/bbl
          /usr/local/bin/bosh
          /usr/local/bin/terraform
        key: ${{ runner.os }}-bbl-tools-v1  
        restore-keys: ${{ runner.os }}-bbl-tools-

    - name: Install BBL, Terraform, BOSH CLI
      if: steps.cache-tools.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euo pipefail
        
        wget -O /tmp/bbl https://github.com/cloudfoundry/bosh-bootloader/releases/download/v9.0.36/bbl-v9.0.36_linux_amd64
        chmod +x /tmp/bbl
        sudo mv /tmp/bbl /usr/local/bin/bbl

        wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
        unzip /tmp/terraform.zip -d /tmp/
        sudo mv /tmp/terraform /usr/local/bin/terraform

        wget -O /tmp/bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v7.4.0/bosh-cli-7.4.0-linux-amd64
        chmod +x /tmp/bosh
        sudo mv /tmp/bosh /usr/local/bin/bosh

    - name: Prepare GCP credentials
      id: gcp-creds
      shell: bash
      run: |
        set -euo pipefail
        
        if [[ -n "${GOOGLE_APPLICATION_CREDENTIALS:-}" ]] && [[ -f "${GOOGLE_APPLICATION_CREDENTIALS}" ]]; then
          echo "Using GCP credentials from google-github-actions/auth"
          echo "GCP_KEY_FILE=${GOOGLE_APPLICATION_CREDENTIALS}" >> "$GITHUB_OUTPUT"
          echo "creds_source=workload_identity" >> "$GITHUB_OUTPUT"
        else
          echo "ERROR: No GCP credentials found"
          echo "GOOGLE_APPLICATION_CREDENTIALS is not set or file doesn't exist"
          echo "Available GCP-related env vars:"
          env | grep -E "(GOOGLE|GCP|GCLOUD|CLOUDSDK)" | sed 's/=.*/=***/' || echo "No GCP env vars found"
          exit 1
        fi

    - name: Run BBL Up
      id: bbl-up
      shell: bash
      run: |
        set -euo pipefail
        export PATH="/usr/local/bin:$PATH"

        TEMP_DIR=$(mktemp -d)
        chmod 700 "$TEMP_DIR"
        trap "rm -rf '$TEMP_DIR'" EXIT ERR INT TERM

        mkdir -p bbl-state/${{ inputs.env_name }}
        cd bbl-state/${{ inputs.env_name }}

        # Get GCP credentials file path
        GCP_KEY_FILE="${{ steps.gcp-creds.outputs.GCP_KEY_FILE }}"
        
        if [[ ! -f "$GCP_KEY_FILE" ]]; then
          echo "ERROR: GCP key file not found: $GCP_KEY_FILE"
          exit 1
        fi
        
        echo "Using GCP credentials file: $GCP_KEY_FILE"
        echo "Credentials source: ${{ steps.gcp-creds.outputs.creds_source }}"

        echo "${{ inputs.lb_cert }}" > "$TEMP_DIR/lb-cert.pem"
        echo "${{ inputs.lb_key }}" > "$TEMP_DIR/lb-key.pem"
        chmod 600 "$TEMP_DIR"/*.pem
        
        export BBL_LB_CERT="$TEMP_DIR/lb-cert.pem"
        export BBL_LB_KEY="$TEMP_DIR/lb-key.pem"
        
        export BBL_GCP_PROJECT_ID="${{ inputs.gcp_project_id }}"
        export BBL_GCP_ZONE="${{ inputs.gcp_zone }}"
        export BBL_GCP_REGION="${{ inputs.gcp_region }}"
        export BBL_IAAS=gcp

        if [[ -n "${{ inputs.lb_domain }}" ]]; then
          export LB_DOMAIN="${{ inputs.lb_domain }}"
        fi

        echo "=== BBL Configuration ==="
        echo "Project ID: $BBL_GCP_PROJECT_ID"
        echo "Zone: $BBL_GCP_ZONE"
        echo "Region: $BBL_GCP_REGION"
        echo "IAAS: $BBL_IAAS"
        echo "LB Domain: ${LB_DOMAIN:-not set}"
        echo "LB Cert: ${BBL_LB_CERT}"
        echo "LB Key: ${BBL_LB_KEY}"
        echo "GCP Key: $GCP_KEY_FILE"
        echo "========================="

        bbl up \
          --iaas gcp \
          --gcp-service-account-key "$GCP_KEY_FILE" \
          --gcp-project-id "$BBL_GCP_PROJECT_ID" \
          --gcp-zone "$BBL_GCP_ZONE" \
          --gcp-region "$BBL_GCP_REGION" \
          --terraform-binary /usr/local/bin/terraform \
          --lb-type cf \
          --lb-cert "$BBL_LB_CERT" \
          --lb-key "$BBL_LB_KEY" \
          ${LB_DOMAIN:+--lb-domain "$LB_DOMAIN"}

        echo "BBL up completed successfully"
        echo "success=true" >> "$GITHUB_OUTPUT"

    - name: Commit and push BBL state
      shell: bash
      run: |
        set -euo pipefail
        cd bbl-state
        git config user.name "CF Buildpacks Eng Bot"
        git config user.email "test@test.com"
        
        cat >> .gitignore <<'EOF'
        # Secrets
        **/gcp-key.json
        **/service-account-key.json
        **/*-key.json
        **/*.key
        **/*.pem
        **/private_key
        **/id_rsa*
        **/.ssh/
        **/credentials
        **/*secret*
        **/*password*
        EOF

        if [[ -n "$(git status --porcelain)" ]]; then
          git add -A .gitignore
          git add -A ${{ inputs.env_name }}
          git commit -m "Update BBL state for ${{ inputs.env_name }}"
          git push origin ${{ inputs.bbl_state_branch }}
          echo "BBL state changes committed and pushed"
        else
          echo "No BBL state changes to commit"
        fi

    - name: Cleanup sensitive files
      if: always()
      shell: bash
      run: |
        set +e
        
        find bbl-state -type f \( \
          -name "*.pem" -o \
          -name "*.key" -o \
          -name "*-key.json" -o \
          -name "private_key" -o \
          -name "id_rsa*" -o \
          -name "credentials" \
        \) -exec shred -vfz -n 3 {} \; 2>/dev/null || true
        
        echo "Cleanup completed"
