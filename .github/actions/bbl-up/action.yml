name: 'BBL Up'
description: 'Set up test environment using BBL with OIDC authentication'

inputs:
  stack:
    description: 'Stack name'
    required: true
  version:
    description: 'Version number'
    required: true
  env_name:
    description: 'Environment name'
    required: true
  gcp_project_id:
    description: 'GCP Project ID'
    required: true
  gcp_zone:
    description: 'GCP Zone'
    required: true
  gcp_region:
    description: 'GCP Region'
    required: true
  lb_domain:
    description: 'Load balancer domain'
    required: true
  bbl_state_repo:
    description: 'Repo for BBL state (owner/repo)'
    required: true
  bbl_state_branch:
    description: 'Branch for BBL state'
    required: false
    default: 'main'
  lb_cert:
    description: 'Load balancer certificate'
    required: true
  lb_key:
    description: 'Load balancer private key'
    required: true
  bbl_state_deploy_key:
    description: 'SSH deploy key for BBL state repo'
    required: true

outputs:
  success:
    description: 'Whether BBL up succeeded'
    value: ${{ steps.bbl-up.outputs.success }}

runs:
  using: 'composite'
  steps:
    - name: Checkout BBL state repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.bbl_state_repo }}
        ref: ${{ inputs.bbl_state_branch }}
        path: bbl-state
        ssh-key: ${{ inputs.bbl_state_deploy_key }}

    - name: Install BBL, Terraform, BOSH CLI
      shell: bash
      run: |
        set -euo pipefail
        
        wget -O /tmp/bbl https://github.com/cloudfoundry/bosh-bootloader/releases/download/v9.0.36/bbl-v9.0.36_linux_amd64
        chmod +x /tmp/bbl
        sudo mv /tmp/bbl /usr/local/bin/bbl

        wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
        unzip /tmp/terraform.zip -d /tmp/
        sudo mv /tmp/terraform /usr/local/bin/terraform

        wget -O /tmp/bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v7.4.0/bosh-cli-7.4.0-linux-amd64
        chmod +x /tmp/bosh
        sudo mv /tmp/bosh /usr/local/bin/bosh

    - name: Setup GCP authentication for BBL
      id: gcp-setup
      shell: bash
      run: |
        set -euo pipefail
        
        if [[ -z "${GOOGLE_APPLICATION_CREDENTIALS:-}" ]] || [[ ! -f "${GOOGLE_APPLICATION_CREDENTIALS}" ]]; then
          echo "ERROR: GOOGLE_APPLICATION_CREDENTIALS not set or file doesn't exist"
          exit 1
        fi
        
        echo "OIDC credentials file: ${GOOGLE_APPLICATION_CREDENTIALS}"
        
        gcloud auth login --cred-file="${GOOGLE_APPLICATION_CREDENTIALS}" --quiet
        
        SA_EMAIL=$(gcloud auth list --filter=status:ACTIVE --format="value(account)")
        
        if [[ -z "$SA_EMAIL" ]]; then
          echo "ERROR: Could not determine service account email after authentication"
          gcloud auth list
          exit 1
        fi
        
        echo "✓ Authenticated as: $SA_EMAIL"
        echo "✓ Project: ${{ inputs.gcp_project_id }}"
        
        TEMP_DIR=$(mktemp -d)
        chmod 700 "$TEMP_DIR"
        
        echo "${{ inputs.lb_cert }}" > "$TEMP_DIR/lb-cert.pem"
        echo "${{ inputs.lb_key }}" > "$TEMP_DIR/lb-key.pem"
        chmod 600 "$TEMP_DIR"/*.pem
        
        echo "TEMP_DIR=$TEMP_DIR" >> "$GITHUB_OUTPUT"
        echo "SA_EMAIL=$SA_EMAIL" >> "$GITHUB_OUTPUT"

    - name: Run BBL Up
      id: bbl-up
      shell: bash
      env:
        BBL_GCP_PROJECT_ID: ${{ inputs.gcp_project_id }}
        BBL_GCP_ZONE: ${{ inputs.gcp_zone }}
        BBL_GCP_REGION: ${{ inputs.gcp_region }}
        BBL_IAAS: gcp
        LB_DOMAIN: ${{ inputs.lb_domain }}
      run: |
        set -euo pipefail
        
        TEMP_DIR="${{ steps.gcp-setup.outputs.TEMP_DIR }}"
        
        mkdir -p bbl-state/${{ inputs.env_name }}
        cd bbl-state/${{ inputs.env_name }}
        
        echo "=== BBL Configuration ==="
        echo "Environment: ${{ inputs.env_name }}"
        echo "Project ID: $BBL_GCP_PROJECT_ID"
        echo "Zone: $BBL_GCP_ZONE"
        echo "Region: $BBL_GCP_REGION"
        echo "Service Account: ${{ steps.gcp-setup.outputs.SA_EMAIL }}"
        echo "LB Domain: $LB_DOMAIN"
        echo "Using OIDC authentication"
        echo "========================="
        
        bbl up \
          --iaas gcp \
          --gcp-project-id "$BBL_GCP_PROJECT_ID" \
          --gcp-zone "$BBL_GCP_ZONE" \
          --gcp-region "$BBL_GCP_REGION" \
          --lb-type cf \
          --lb-cert "$TEMP_DIR/lb-cert.pem" \
          --lb-key "$TEMP_DIR/lb-key.pem" \
          --lb-domain "$LB_DOMAIN"
        
        echo "✓ BBL up completed successfully"
        echo "success=true" >> "$GITHUB_OUTPUT"

    - name: Commit and push BBL state
      shell: bash
      run: |
        set -euo pipefail
        cd bbl-state
        
        git config user.name "CF Buildpacks Eng Bot"
        git config user.email "test@test.com"
        
        cat >> .gitignore <<'EOF'
        # Secrets
        **/*.pem
        **/*.key
        **/vars/*
        **/creds.yml
        EOF
        
        if [[ -n "$(git status --porcelain)" ]]; then
          git add -A
          git commit -m "Update BBL state for ${{ inputs.env_name }}"
          git push origin ${{ inputs.bbl_state_branch }}
          echo "✓ BBL state committed and pushed"
        else
          echo "No BBL state changes to commit"
        fi

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        TEMP_DIR="${{ steps.gcp-setup.outputs.TEMP_DIR }}"
        if [[ -n "$TEMP_DIR" ]] && [[ -d "$TEMP_DIR" ]]; then
          rm -rf "$TEMP_DIR"
          echo "✓ Cleanup completed"
        fi
