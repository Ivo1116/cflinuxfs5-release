name: 'Setup Cloudflare DNS'
description: 'Configure DNS records for CF deployment based on BBL state vars files'

inputs:
  env_name:
    description: 'BBL environment name'
    required: true
  bbl_state_repo:
    description: 'BBL state repo (owner/repo)'
    required: true
  bbl_state_branch:
    description: 'BBL state branch'
    required: false
    default: main
  system_domain:
    description: 'System domain (e.g., sisle.org)'
    required: true

outputs:
  success:
    description: 'Whether DNS setup succeeded'
    value: ${{ steps.dns.outputs.success }}

runs:
  using: 'composite'
  steps:
    - name: Checkout BBL state repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.bbl_state_repo }}
        ref: ${{ inputs.bbl_state_branch }}
        ssh-key: ${{ env.BBL_STATE_DEPLOY_KEY }}  
        path: bbl-state
        persist-credentials: false

    - name: Install BBL, jq, yq, and CF CLI
      shell: bash
      run: |
        set -euo pipefail
        sudo apt-get update && sudo apt-get install -y jq
        wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
        chmod +x /usr/local/bin/yq
        wget -O /tmp/bbl https://github.com/cloudfoundry/bosh-bootloader/releases/download/v9.0.36/bbl-v9.0.36_linux_amd64
        chmod +x /tmp/bbl && sudo mv /tmp/bbl /usr/local/bin/bbl
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update && sudo apt-get install -y cf8-cli
        echo "Tools installed: jq, yq, bbl, cf-cli"
        yq --version  

    - name: Setup Cloudflare DNS Records
      id: dns
      shell: bash
      run: |
        set -euo pipefail
        BBL_STATE_DIR="bbl-state/${{ inputs.env_name }}"
        DOMAIN="${{ inputs.system_domain }}"
        VARS_DIR="$BBL_STATE_DIR/vars"
        DIRECTOR_VARS_FILE="$VARS_DIR/director-vars-file.yml"
        JUMPBOX_VARS_FILE="$VARS_DIR/jumpbox-vars-file.yml"
        if [[ ! -d "$BBL_STATE_DIR/vars" ]]; then
          echo "Error: vars dir not found in $BBL_STATE_DIR/vars"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        if [[ -f "$DIRECTOR_VARS_FILE" ]]; then
          VARS_FILE="$DIRECTOR_VARS_FILE"
        elif [[ -f "$JUMPBOX_VARS_FILE" ]]; then
          VARS_FILE="$JUMPBOX_VARS_FILE"
        else
          echo "Error: No vars YML files found"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        eval "$(bbl print-env --state-dir "$BBL_STATE_DIR")"
        ROUTER_LB_IP=$(yq eval -r '.router_lb_ip // ""' "$VARS_FILE")
        SSH_PROXY_LB_IP=$(yq eval -r '.ssh_proxy_lb_ip // ""' "$VARS_FILE")
        TCP_ROUTER_LB_IP=$(yq eval -r '.tcp_router_lb_ip // ""' "$VARS_FILE")
        WS_LB_IP=$(yq eval -r '.ws_lb_ip // ""' "$VARS_FILE")
        EXTERNAL_IP=$(yq eval -r '.external_ip // ""' "$VARS_FILE")
        DIRECTOR_ADDR=$(yq eval -r '.director_address // ""' "$VARS_FILE")
        DIRECTOR_IP=$(echo "$DIRECTOR_ADDR" | sed 's|https\?://||' | sed 's|:.*||')
        MAIN_LB_IP="${ROUTER_LB_IP:-${WS_LB_IP:-${EXTERNAL_IP:-${DIRECTOR_IP:-''}}}}"
        SSH_LB_IP="${SSH_PROXY_LB_IP:-${EXTERNAL_IP:-${DIRECTOR_IP:-${MAIN_LB_IP:-''}}}}"
        TCP_LB_IP="${TCP_ROUTER_LB_IP:-${MAIN_LB_IP:-${EXTERNAL_IP:-${DIRECTOR_IP:-''}}}}"
        DOPPLER_LB_IP="${WS_LB_IP:-${MAIN_LB_IP:-${EXTERNAL_IP:-${DIRECTOR_IP:-''}}}}"
        LOGGREGATOR_LB_IP="$DOPPLER_LB_IP"
        if [[ -z "$MAIN_LB_IP" ]]; then
          echo "Error: No main IP found"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        ZONE_ID="${CLOUDFLARE_ZONE_ID:-}"
        API_TOKEN="${CLOUDFLARE_API_TOKEN:-}"
        if [[ -z "$ZONE_ID" || -z "$API_TOKEN" ]]; then
          echo "Error: Missing Cloudflare secrets"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        upsert_record() {
          local name="$1"  
          local ip="$2"
          local record_type="A"
          local api_name="$name"
          if [[ "$name" == "@" ]]; then
            api_name=""
          fi
          local query_name="$api_name"
          local existing_id=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?type=$record_type&name=${query_name:-.}.${DOMAIN}" -H "Authorization: Bearer $API_TOKEN" -H "Content-Type: application/json" | jq -r '.result[0].id // empty')
          if [[ -n "$existing_id" ]]; then
            local success=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$existing_id" -H "Authorization: Bearer $API_TOKEN" -H "Content-Type: application/json" --data "{\"type\":\"$record_type\",\"name\":\"$api_name\",\"content\":\"$ip\",\"ttl\":1,\"proxied\":false}" | jq -r '.success // empty')
            if [[ "$success" == "true" ]]; then
              echo "Updated $name.$DOMAIN -> $ip"
              return 0
            fi
          else
            local success=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" -H "Authorization: Bearer $API_TOKEN" -H "Content-Type: application/json" --data "{\"type\":\"$record_type\",\"name\":\"$api_name\",\"content\":\"$ip\",\"ttl\":1,\"proxied\":false}" | jq -r '.success // empty')
            if [[ "$success" == "true" ]]; then
              echo "Created $name.$DOMAIN -> $ip"
              return 0
            fi
          fi
          return 1
        }
        local overall_success=true
        upsert_record "doppler.sys" "$DOPPLER_LB_IP" && echo "Updated doppler.sys -> $DOPPLER_LB_IP"
        upsert_record "loggregator.sys" "$LOGGREGATOR_LB_IP" && echo "Updated loggregator.sys -> $LOGGREGATOR_LB_IP"
        upsert_record "*" "$MAIN_LB_IP" && echo "Updated *.${DOMAIN} -> $MAIN_LB_IP"
        upsert_record "@" "$MAIN_LB_IP" && echo "Updated ${DOMAIN} -> $MAIN_LB_IP"
        upsert_record "ssh.sys" "$SSH_LB_IP" && echo "Updated ssh.sys -> $SSH_LB_IP"
        upsert_record "tcp.sys" "$TCP_LB_IP" && echo "Updated tcp.sys -> $TCP_LB_IP"
        if [[ $? -eq 0 ]]; then
          echo "::notice::DNS records configured successfully"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "::error::DNS setup failed"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Cleanup on failure
      if: failure()
      shell: bash
      run: |
        set -euo pipefail
        echo "Cleanup: Removing temp state if partial failure"
        rm -rf bbl-state/*.yml bbl-state/vars/ || true
        echo "Cleanup complete"
