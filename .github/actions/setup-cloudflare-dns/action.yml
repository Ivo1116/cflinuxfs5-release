# .github/actions/setup-cloudflare-dns/action.yml

name: 'Setup Cloudflare DNS for CF Environment'
description: 'Extract IPs from BOSH vars YAML files in BBL state repo and create/update DNS records in Cloudflare'

inputs:
  env_name:
    description: 'Environment name (used for vars file paths in BBL state repo)'
    required: true
    default: 'cflinuxfs5'
  bbl_state_repo:
    description: 'BBL state repository (cloned for vars files)'
    required: true
    default: 'ivo1116/buildpacks-envs'  # Default from main workflow
  bbl_state_branch:
    description: 'BBL state branch'
    required: true
    default: 'main'
  system_domain:
    description: 'System domain (e.g., sisle.org)'
    required: true
    default: 'sisle.org'

outputs:
  success:
    description: 'Whether DNS setup succeeded'
    value: ${{ steps.setup-dns.outputs.success }}

runs:
  using: 'composite'
  steps:
    - name: Install dependencies (yq and jq)
      shell: bash
      run: |
        # Install yq
        sudo snap install yq
        # Install jq (usually available, but ensure)
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Checkout BBL state repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.bbl_state_repo }}
        ref: ${{ inputs.bbl_state_branch }}
        ssh-key: ${{ env.BBL_STATE_DEPLOY_KEY }}  
        path: bbl-state
        persist-credentials: false

    - name: Extract IPs from YAML files
      id: extract-ips
      shell: bash
      run: |
        # Vars files are in cloned BBL state repo at bbl-state/{env_name}/vars/
        ENV_NAME="${{ inputs.env_name }}"
        JUMBOX_VARS="bbl-state/${ENV_NAME}/vars/jumpbox-vars-file.yml"
        DIRECTOR_VARS="bbl-state/${ENV_NAME}/vars/director-vars-file.yml"
        SYS_SUBDOMAIN="sys"  # Fixed as per standard CF

        if [[ ! -f "$JUMBOX_VARS" || ! -f "$DIRECTOR_VARS" ]]; then
          echo "Error: YAML files not found at $JUMBOX_VARS and $DIRECTOR_VARS"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        ROUTER_LB_IP=$(yq eval '.router_lb_ip' "$JUMBOX_VARS")
        SSH_PROXY_LB_IP=$(yq eval '.ssh_proxy_lb_ip' "$JUMBOX_VARS")
        TCP_ROUTER_LB_IP=$(yq eval '.tcp_router_lb_ip' "$JUMBOX_VARS")
        WS_LB_IP=$(yq eval '.ws_lb_ip' "$JUMBOX_VARS")

        # Validate consistency with director vars (optional)
        if [[ "$(yq eval '.router_lb_ip' "$DIRECTOR_VARS")" != "$ROUTER_LB_IP" ]]; then
          echo "Warning: router_lb_ip mismatch between files."
        fi

        # Output IPs as step outputs and env for next steps
        echo "router_lb_ip=$ROUTER_LB_IP" >> $GITHUB_OUTPUT
        echo "ssh_proxy_lb_ip=$SSH_PROXY_LB_IP" >> $GITHUB_OUTPUT
        echo "tcp_router_lb_ip=$TCP_ROUTER_LB_IP" >> $GITHUB_OUTPUT
        echo "ws_lb_ip=$WS_LB_IP" >> $GITHUB_OUTPUT

        # Export as env for the next step
        echo "ROUTER_LB_IP=$ROUTER_LB_IP" >> $GITHUB_ENV
        echo "SSH_PROXY_LB_IP=$SSH_PROXY_LB_IP" >> $GITHUB_ENV
        echo "TCP_ROUTER_LB_IP=$TCP_ROUTER_LB_IP" >> $GITHUB_ENV
        echo "WS_LB_IP=$WS_LB_IP" >> $GITHUB_ENV
        echo "DOMAIN=${{ inputs.system_domain }}" >> $GITHUB_ENV
        echo "SYS_SUBDOMAIN=$SYS_SUBDOMAIN" >> $GITHUB_ENV

        echo "Extracted IPs:"
        echo "  router_lb_ip: $ROUTER_LB_IP"
        echo "  ssh_proxy_lb_ip: $SSH_PROXY_LB_IP"
        echo "  tcp_router_lb_ip: $TCP_ROUTER_LB_IP"
        echo "  ws_lb_ip: $WS_LB_IP"

    - name: Validate Cloudflare secrets
      shell: bash
      run: |
        if [[ -z "$CLOUDFLARE_API_TOKEN" || -z "$CLOUDFLARE_ZONE_ID" ]]; then
          echo "Error: CLOUDFLARE_API_TOKEN or CLOUDFLARE_ZONE_ID not set."
          exit 1
        fi
        echo "Cloudflare credentials validated."

    - name: Create or Update DNS Records
      id: setup-dns
      shell: bash
      run: |
        # Function to create or patch a DNS record
        create_or_update_record() {
          local name="$1"
          local ip="$2"
          local record_type="A"
          local proxied=false  # DNS only (no proxy)

          # First, check if record exists (GET request)
          local existing_record=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records?type=$record_type&name=$name" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json")

          local record_id=$(echo "$existing_record" | jq -r '.result[0].id // empty')

          if [[ "$record_id" == "null" || -z "$record_id" ]]; then
            # Create new record
            echo "Creating new record: $name -> $ip"
            local response=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "{
                \"type\": \"$record_type\",
                \"name\": \"$name\",
                \"content\": \"$ip\",
                \"ttl\": 1,
                \"proxied\": $proxied
              }")

            if echo "$response" | jq -e '.success' >/dev/null; then
              echo "Successfully created: $name"
            else
              echo "Failed to create $name: $(echo "$response" | jq -r '.errors')"
              return 1
            fi
          else
            # Update existing record
            echo "Updating existing record: $name -> $ip"
            local response=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records/$record_id" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "{
                \"type\": \"$record_type\",
                \"name\": \"$name\",
                \"content\": \"$ip\",
                \"ttl\": 1,
                \"proxied\": $proxied
              }")

            if echo "$response" | jq -e '.success' >/dev/null; then
              echo "Successfully updated: $name"
            else
              echo "Failed to update $name: $(echo "$response" | jq -r '.errors')"
              return 1
            fi
          fi
        }

        # Records to create (based on CF standards)
        # Wildcard app domain (*.sisle.org)
        create_or_update_record "*" "$ROUTER_LB_IP"

        # Apex domain (sisle.org)
        create_or_update_record "$DOMAIN" "$ROUTER_LB_IP"

        # Wildcard system domain (*.sys.sisle.org) to gorouter
        create_or_update_record "*.$SYS_SUBDOMAIN.$DOMAIN" "$ROUTER_LB_IP"

        # Specific system records
        create_or_update_record "doppler.$SYS_SUBDOMAIN.$DOMAIN" "$WS_LB_IP"
        create_or_update_record "loggregator.$SYS_SUBDOMAIN.$DOMAIN" "$WS_LB_IP"
        create_or_update_record "ssh.$SYS_SUBDOMAIN.$DOMAIN" "$SSH_PROXY_LB_IP"
        create_or_update_record "tcp.$SYS_SUBDOMAIN.$DOMAIN" "$TCP_ROUTER_LB_IP"

        echo "All DNS records configured successfully!"
        echo "success=true" >> $GITHUB_OUTPUT
