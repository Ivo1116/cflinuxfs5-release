name: 'Setup Cloudflare DNS for CF Environment'
description: 'Extract IPs from BOSH vars YAML files in BBL state repo, clean up duplicate DNS records in Cloudflare, and create/update DNS records'

inputs:
  env_name:
    description: 'Environment name (used for vars file paths in BBL state repo)'
    required: true
    default: 'cflinuxfs5'
  bbl_state_repo:
    description: 'BBL state repository (cloned for vars files)'
    required: true
  bbl_state_branch:
    description: 'BBL state branch'
    required: true
    default: 'main'
  system_domain:
    description: 'System domain (e.g., sisle.org)'
    required: true

outputs:
  success:
    description: 'Whether DNS setup succeeded'
    value: ${{ steps.setup-dns.outputs.success }}

runs:
  using: 'composite'
  steps:
    - name: Install dependencies (yq and jq)
      shell: bash
      run: |
        sudo snap install yq
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Checkout BBL state repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.bbl_state_repo }}
        ref: ${{ inputs.bbl_state_branch }}
        ssh-key: ${{ env.BBL_STATE_DEPLOY_KEY }}  
        path: bbl-state
        persist-credentials: false

    - name: Extract IPs from YAML files
      id: extract-ips
      shell: bash
      run: |
        ENV_NAME="${{ inputs.env_name }}"
        JUMBOX_VARS="bbl-state/${ENV_NAME}/vars/jumpbox-vars-file.yml"
        DIRECTOR_VARS="bbl-state/${ENV_NAME}/vars/director-vars-file.yml"
        SYS_SUBDOMAIN="sys"  

        if [[ ! -f "$JUMBOX_VARS" || ! -f "$DIRECTOR_VARS" ]]; then
          echo "Error: YAML files not found at $JUMBOX_VARS and $DIRECTOR_VARS"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        ROUTER_LB_IP=$(yq eval '.router_lb_ip' "$JUMBOX_VARS")
        SSH_PROXY_LB_IP=$(yq eval '.ssh_proxy_lb_ip' "$JUMBOX_VARS")
        TCP_ROUTER_LB_IP=$(yq eval '.tcp_router_lb_ip' "$JUMBOX_VARS")
        WS_LB_IP=$(yq eval '.ws_lb_ip' "$JUMBOX_VARS")

        if [[ "$(yq eval '.router_lb_ip' "$DIRECTOR_VARS")" != "$ROUTER_LB_IP" ]]; then
          echo "Warning: router_lb_ip mismatch between files."
        fi

        echo "router_lb_ip=$ROUTER_LB_IP" >> $GITHUB_OUTPUT
        echo "ssh_proxy_lb_ip=$SSH_PROXY_LB_IP" >> $GITHUB_OUTPUT
        echo "tcp_router_lb_ip=$TCP_ROUTER_LB_IP" >> $GITHUB_OUTPUT
        echo "ws_lb_ip=$WS_LB_IP" >> $GITHUB_OUTPUT

        echo "ROUTER_LB_IP=$ROUTER_LB_IP" >> $GITHUB_ENV
        echo "SSH_PROXY_LB_IP=$SSH_PROXY_LB_IP" >> $GITHUB_ENV
        echo "TCP_ROUTER_LB_IP=$TCP_ROUTER_LB_IP" >> $GITHUB_ENV
        echo "WS_LB_IP=$WS_LB_IP" >> $GITHUB_ENV
        echo "DOMAIN=${{ inputs.system_domain }}" >> $GITHUB_ENV
        echo "SYS_SUBDOMAIN=$SYS_SUBDOMAIN" >> $GITHUB_ENV

        echo "Extracted IPs:"
        echo "  router_lb_ip: $ROUTER_LB_IP"
        echo "  ssh_proxy_lb_ip: $SSH_PROXY_LB_IP"
        echo "  tcp_router_lb_ip: $TCP_ROUTER_LB_IP"
        echo "  ws_lb_ip: $WS_LB_IP"

    - name: Validate Cloudflare secrets
      shell: bash
      run: |
        if [[ -z "$CLOUDFLARE_API_TOKEN" || -z "$CLOUDFLARE_ZONE_ID" ]]; then
          echo "Error: CLOUDFLARE_API_TOKEN or CLOUDFLARE_ZONE_ID not set."
          exit 1
        fi
        echo "Cloudflare credentials validated."

    - name: Create or Update DNS Records (with Duplicate Cleanup)
      id: setup-dns
      shell: bash
      run: |
        delete_all_records_for_name() {
          local name="$1"
          local record_type="$2"

          echo "Checking for existing records for $name ($record_type)..."
          local existing_records=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records?type=$record_type&name=$name" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json")

          local records=$(echo "$existing_records" | jq -r '.result[]? | select(.id != null) | .id')

          if [[ "$records" == "null" ]] || [[ -z "$records" ]]; then
            echo "No existing records found for $name."
            return 0
          fi

          local count=0
          echo "$records" | while read -r record_id; do
            if [[ -n "$record_id" && "$record_id" != "null" ]]; then
              echo "Deleting existing record ID: $record_id for $name"
              local delete_response=$(curl -s -X DELETE "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records/$record_id" \
                -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                -H "Content-Type: application/json")

              if echo "$delete_response" | jq -e '.success' >/dev/null; then
                echo "Successfully deleted record: $record_id"
                ((count++))
              else
                echo "Failed to delete $record_id: $(echo "$delete_response" | jq -r '.errors')"
                return 1
              fi
            fi
          done

          if [[ $count -gt 0 ]]; then
            echo "Deleted $count duplicate/old records for $name."
          fi
        }

        create_record() {
          local name="$1"
          local ip="$2"
          local record_type="A"
          local proxied=false  

          echo "Creating new record: $name -> $ip"
          local response=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "{
              \"type\": \"$record_type\",
              \"name\": \"$name\",
              \"content\": \"$ip\",
              \"ttl\": 1,
              \"proxied\": $proxied
            }")

          if echo "$response" | jq -e '.success' >/dev/null; then
            echo "Successfully created: $name"
          else
            echo "Failed to create $name: $(echo "$response" | jq -r '.errors')"
            return 1
          fi
        }

        local_records=(
          "* $ROUTER_LB_IP"  
          "$DOMAIN $ROUTER_LB_IP"  
          "*.$SYS_SUBDOMAIN.$DOMAIN $ROUTER_LB_IP"  
          "doppler.$SYS_SUBDOMAIN.$DOMAIN $WS_LB_IP"
          "loggregator.$SYS_SUBDOMAIN.$DOMAIN $WS_LB_IP"
          "ssh.$SYS_SUBDOMAIN.$DOMAIN $SSH_PROXY_LB_IP"
          "tcp.$SYS_SUBDOMAIN.$DOMAIN $TCP_ROUTER_LB_IP"
        )

        local all_success=true
        for record in "${local_records[@]}"; do
          IFS=' ' read -r name ip <<< "$record"
          delete_all_records_for_name "$name" "A"
          create_record "$name" "$ip" || all_success=false
        done

        if [[ $all_success == true ]]; then
          echo "All DNS records cleaned up and configured successfully!"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "One or more DNS operations failed."
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
