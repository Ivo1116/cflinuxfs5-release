name: 'Build BOSH Release'
description: 'Build a BOSH release tarball with vendored golang-1-linux and a rootfs blob'

inputs:
  stack:
    description: 'Stack name (e.g., cflinuxfs5)'
    required: true
  version:
    description: 'Version number for the rootfs (e.g., 1.0.0-rc.1)'
    required: true
  release_repo:
    description: 'GitHub org/repo for the BOSH release'
    required: true
  bosh_cli_version:
    description: 'Version of bosh-cli to install'
    required: false
    default: "7.4.0"
  go_version:
    description: 'Go version to vendor as a blob under golang-1-linux (e.g., 1.24.6)'
    required: false
    default: "1.24.6"
  golang_release_ref:
    description: 'Git ref (tag/branch/commit) of bosh-package-golang-release to vendor from'
    required: false
    default: "main"

outputs:
  release_tarball:
    description: 'Path to the generated BOSH release tarball'
    value: ${{ steps.build.outputs.release_tarball }}

runs:
  using: "composite"
  steps:
    - name: Install prerequisites
      shell: bash
      run: |
        set -euo pipefail
        sudo apt-get update -y
        sudo apt-get install -y curl wget git jq

    - name: Checkout Release repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.release_repo }}
        ref: main
        path: release-repo

    - name: Checkout bosh-package-golang-release
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/bosh-package-golang-release
        ref: ${{ inputs.golang_release_ref }}
        path: bosh-package-golang-release

    - name: Install bosh CLI
      shell: bash
      run: |
        set -euo pipefail
        VERSION="${{ inputs.bosh_cli_version }}"
        wget -O /tmp/bosh "https://github.com/cloudfoundry/bosh-cli/releases/download/v${VERSION}/bosh-cli-${VERSION}-linux-amd64"
        chmod +x /tmp/bosh
        sudo mv /tmp/bosh /usr/local/bin/bosh

    - name: Write private.yml
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p release-repo/config
        cat > release-repo/config/private.yml <<EOF
        blobstore:
          provider: s3
          options:
            bucket_name: ${BUCKET_NAME}
            access_key_id: ${AWS_ACCESS_KEY_ID}
            secret_access_key: ${AWS_SECRET_ACCESS_KEY}
        EOF

    - name: Build BOSH release
      id: build
      shell: bash
      run: |
        set -euo pipefail
        STACK="${{ inputs.stack }}"
        VERSION="${{ inputs.version }}"
        GO_VERSION="${{ inputs.go_version }}"
        REL_REPO=${{ inputs.release_repo }}

        echo "STACK=$STACK"
        echo "VERSION=$VERSION"
        echo "GO_VERSION=$GO_VERSION"
        echo "PWD=$(pwd)"
        echo "REL_REPO=$REL_REPO"

        cd release-repo

        ls

        bosh vendor-package golang-1-linux ../bosh-package-golang-release

        GO_BLOB_DIR="blobs/golang-1-linux"
        GO_BLOB_FILE="go${GO_VERSION}.linux-amd64.tar.gz"
        mkdir -p "${GO_BLOB_DIR}"

        if [[ ! -f "${GO_BLOB_DIR}/${GO_BLOB_FILE}" ]]; then
          echo "Downloading Go ${GO_VERSION} blob from go.dev..."
          curl -L "https://go.dev/dl/${GO_BLOB_FILE}" -o "${GO_BLOB_DIR}/${GO_BLOB_FILE}"
          bosh add-blob "${GO_BLOB_DIR}/${GO_BLOB_FILE}" "golang-1-linux/${GO_BLOB_FILE}"
        else
          echo "Go blob already present: ${GO_BLOB_DIR}/${GO_BLOB_FILE}"
        fi

        mkdir -p blobs/rootfs

        bosh remove-blob rootfs/${STACK}-*.tar.gz || true

        cp ../rootfs-artifacts/${STACK}-${VERSION}.tar.gz blobs/rootfs/${STACK}-${VERSION}.tar.gz
        bosh add-blob blobs/rootfs/${STACK}-${VERSION}.tar.gz rootfs/${STACK}-${VERSION}.tar.gz

        bosh sync-blobs

        bosh create-release --tarball ../rootfs-artifacts/${STACK}-release-${VERSION}.tgz --force

        echo "release_tarball=../rootfs-artifacts/${STACK}-release-${VERSION}.tgz" >> $GITHUB_OUTPUT
